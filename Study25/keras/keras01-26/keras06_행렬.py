import numpy as np

x1 = np.array([1,2,3])
print('x1 =', x1.shape) # .shape : 데이터에 대한 구조를 확인하는 코드 (큰 데이터를 받았을 때 쓸만함) >>> x1 = (3,) : 3개짜리 벡터(,) 라는 뜻
                                 # 데이터 shape을 보고 몇 차원 데이터고, 어떤 구성인지 정도는 볼 수 있어야 데이터를 받았을 때 대략적인 평가 정도...
                                 # ex) [[[1,1,1,1],[2,2,2,2]],[[3,3,3,3],[4,4,4,4]]] >>> (2,2,4)
                                 # ex) [[[[1,2,3]]],[[[1,2,3]]]] >>> (2,1,1,3)
x2 = np.array([[1,2,3]])
print('x2 =', x2.shape) # x2 = (1, 3)

x3 = np.array([[1,2],[3,4]])
print('x3 =', x3.shape) # x3 = (2, 2)

x4 = np.array([[1,2],[3,4],[5,6]])
print('x4 =', x4.shape) # x4 = (3, 2)

x5 = np.array([[[1,2],[3,4],[5,6]]])
print('x5 =', x5.shape) # x5 = (1, 3, 2)

x6 = np.array([[[1,2],[3,4]],[[5,6],[7,8]]])
print('x6 =', x6.shape) # x6 = (2, 2, 2)

x7 = np.array([[[[1,2,3,4,5],[6,7,8,9,0]]]])
print('x7 =', x7.shape) # x7 = (1, 1, 2, 5) >>> 보통 이런게 이미지 데이터 >>> 데이터를 보고 모델구성을 보통 진행

x8 = np.array([[1,2,3],[4,5,6]])
print('x8 =', x8.shape) # x8 = (2, 3)

x9 = np.array([[[[1]]],[[[2]]]])
print('x9 =', x9.shape) # x9 = (2, 1, 1, 1)

x10 = np.array([[[[[1,1]],[[1,1]]]],[[[[2,2]],[[2,2]]]]])
print('x10 =', x10.shape) # x10 = (2, 1, 2, 1, 2)

# 예제_JK
x1 = np.array([[[1,1,1]],[[2,2,2]]])
x2 = np.array([[[1],[2],[3],[1],[2],[3]],[[4],[5],[6],[4],[5],[6]]])
x3 = np.array([[[1,2,3,4],[2,4,5,6],[3,6,8,1]],[[0,1,5,2],[1,2,3,4],[2,4,6,7]]])
x4 = np.array([[[1]],[[2]]])
x5 = np.array([[[[1],[2]]],[[[3],[4]]]])
    # np 수준에서는 규격이 일정하게 나가야한다, 혹시 실무에서 규격이 안맞으면 임의의 값이라도 줘야한다

print('')

print('#############################################################')
print('x1 =', x1.shape) # x1 = (2, 1, 3)
print('x2 =', x2.shape) # x2 = (2, 6, 1)
print('x3 =', x3.shape) # x3 = (2, 3, 4)
print('x4 =', x4.shape) # x4 = (2, 1, 1)
print('x5 =', x5.shape) # x5 = (2, 1, 2, 1)
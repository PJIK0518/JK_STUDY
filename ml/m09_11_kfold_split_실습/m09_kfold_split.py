### kfold : 모든 경우의 수의 n빵인 경우 전체 데이터에 대한 과적합 발생
### >> Test는 따로 빼두고, Train만 Kfold를 진행해서 과적합 방지 > 다시 아까운데이터 > 데이터는 많으면 많을 수록 좋다...

from sklearn.model_selection import train_test_split, KFold, StratifiedKFold, cross_val_score
from sklearn.svm import SVC

import pandas as pd
import numpy as np

from sklearn.datasets import load_iris
##################################################
#1. 데이터
##################################################
Data = load_iris()

x = Data.data
y = Data['target']
#########################
# print(x.shape)(150, 4)
# print(y.shape)(150,)
#########################
x_df = pd.DataFrame(x, columns=Data.feature_names)
""" print(x_df) [150 rows x 4 columns]
     sepal length (cm)  sepal width (cm)  petal length (cm)  petal width (cm)
0                  5.1               3.5                1.4               0.2
1                  4.9               3.0                1.4               0.2
2                  4.7               3.2                1.3               0.2
3                  4.6               3.1                1.5               0.2
4                  5.0               3.6                1.4               0.2
..                 ...               ...                ...               ...
145                6.7               3.0                5.2               2.3
146                6.3               2.5                5.0               1.9
147                6.5               3.0                5.2               2.0
148                6.2               3.4                5.4               2.3
149                5.9               3.0                5.1               1.8 """
#########################
NS = 3
KF = KFold(n_splits=NS, shuffle=True)

for x_trn, x_val in KF.split(x_df):
    print('ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ')
    print(x_trn, '\n', x_val)
""" x_df를 trn, val set으로 분리해서 세가지 경우의 수 제공 shuffle=False
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
[ 50  51  52  53  54  55  56  57  58  59  60  61  62  63  64  65  66  67 
  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84  85 
  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101 102 103 
 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 
 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 
 140 141 142 143 144 145 146 147 148 149]
 [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 
 48 49]
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
[  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17 
  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35 
  36  37  38  39  40  41  42  43  44  45  46  47  48  49 100 101 102 103 
 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 
 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 
 140 141 142 143 144 145 146 147 148 149]
 [50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73
 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 
 98 99]
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 
 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 
 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 
 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 
 96 97 98 99]
 [100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117
 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 
 136 137 138 139 140 141 142 143 144 145 146 147 148 149] """
""" x_df를 trn, val set으로 분리해서 세가지 경우의 수 제공 shuffle=True
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
[  0   1   2   3   4   5   6   7  10  12  14  18  19  20  21  22  23  24
  25  26  27  28  29  30  31  33  36  37  38  41  42  44  45  48  49  50
  51  52  53  56  57  58  59  61  62  63  64  65  66  67  68  69  70  71
  72  73  74  78  82  84  85  86  89  90  92  93  96  97  98 100 102 103
 104 105 108 109 110 112 114 115 116 117 121 122 124 125 126 127 128 130
 131 132 133 135 136 137 143 145 146 148]
 [  8   9  11  13  15  16  17  32  34  35  39  40  43  46  47  54  55  60
  75  76  77  79  80  81  83  87  88  91  94  95  99 101 106 107 111 113
 118 119 120 123 129 134 138 139 140 141 142 144 147 149]
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
[  1   2   6   8   9  10  11  12  13  14  15  16  17  20  21  23  28  31
  32  33  34  35  39  40  42  43  44  45  46  47  49  50  51  52  54  55
  57  59  60  64  66  69  70  74  75  76  77  78  79  80  81  82  83  85
  86  87  88  89  90  91  92  93  94  95  98  99 101 103 104 105 106 107
 108 109 110 111 113 115 117 118 119 120 121 123 124 127 129 133 134 136
 138 139 140 141 142 143 144 145 147 149]
 [  0   3   4   5   7  18  19  22  24  25  26  27  29  30  36  37  38  41
  48  53  56  58  61  62  63  65  67  68  71  72  73  84  96  97 100 102
 112 114 116 122 125 126 128 130 131 132 135 137 146 148]
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
[  0   3   4   5   7   8   9  11  13  15  16  17  18  19  22  24  25  26
  27  29  30  32  34  35  36  37  38  39  40  41  43  46  47  48  53  54
  55  56  58  60  61  62  63  65  67  68  71  72  73  75  76  77  79  80
  81  83  84  87  88  91  94  95  96  97  99 100 101 102 106 107 111 112
 113 114 116 118 119 120 122 123 125 126 128 129 130 131 132 134 135 137
 138 139 140 141 142 144 146 147 148 149]
 [  1   2   6  10  12  14  20  21  23  28  31  33  42  44  45  49  50  51
  52  57  59  64  66  69  70  74  78  82  85  86  89  90  92  93  98 103
 104 105 108 109 110 115 117 121 124 127 133 136 143 145] """

for index, (x_trn, x_val)in enumerate(KF.split(x_df)):
    print(f'ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ{index+1}ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ')
    print(x_trn, '\n', x_val)
""" x_df를 trn, val set으로 분리해서 세가지 경우의 수 제공 + index shuffle=True
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ1ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
[  0   1   2   3   5   6   7   8   9  11  14  15  18  19  21  24  27  28
  30  31  32  33  35  36  37  41  45  47  49  50  51  52  53  55  59  62
  63  64  65  66  67  68  69  71  72  73  74  75  76  78  81  82  83  84
  85  86  87  89  90  92  93  94  95  96  97  98  99 100 101 103 104 105
 108 109 110 112 113 116 117 119 120 121 124 125 127 128 130 131 133 135
 138 139 140 141 142 143 144 145 147 148]
 [  4  10  12  13  16  17  20  22  23  25  26  29  34  38  39  40  42  43
  44  46  48  54  56  57  58  60  61  70  77  79  80  88  91 102 106 107
 111 114 115 118 122 123 126 129 132 134 136 137 146 149]
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ2ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
[  3   4   7   8  10  11  12  13  14  16  17  18  19  20  21  22  23  24
  25  26  28  29  31  34  35  36  38  39  40  41  42  43  44  45  46  47
  48  50  52  53  54  55  56  57  58  60  61  62  64  65  66  68  70  71
  73  75  77  78  79  80  82  86  87  88  89  91  94  95 100 102 104 105
 106 107 108 109 111 114 115 116 118 122 123 126 127 128 129 130 132 134
 136 137 139 140 143 145 146 147 148 149]
 [  0   1   2   5   6   9  15  27  30  32  33  37  49  51  59  63  67  69
  72  74  76  81  83  84  85  90  92  93  96  97  98  99 101 103 110 112
 113 117 119 120 121 124 125 131 133 135 138 141 142 144]
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ3ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
[  0   1   2   4   5   6   9  10  12  13  15  16  17  20  22  23  25  26
  27  29  30  32  33  34  37  38  39  40  42  43  44  46  48  49  51  54
  56  57  58  59  60  61  63  67  69  70  72  74  76  77  79  80  81  83
  84  85  88  90  91  92  93  96  97  98  99 101 102 103 106 107 110 111
 112 113 114 115 117 118 119 120 121 122 123 124 125 126 129 131 132 133
 134 135 136 137 138 141 142 144 146 149]
 [  3   7   8  11  14  18  19  21  24  28  31  35  36  41  45  47  50  52
  53  55  62  64  65  66  68  71  73  75  78  82  86  87  89  94  95 100
 104 105 108 109 116 127 128 130 139 140 143 145 147 148] """
 
 

'''
결측치 처리
1. 삭제 _ 행 또는 열
    > 열 삭제는 치명적인 효과를 불러올 수도...
    > 행 삭제도 기껏 모은 데이터가 아깝고
    
2. 삽입
    - 0 : fillna(0)
    - 평균 : fillna(mean) > 이상치의 문제
    - 중위 : median
    - 앞값 : ffill
    - 뒷값 : bfill
    - 지정 : fillna(n)

3. 보간 : interpolate : 알려진 데이터 점 집합의 범위 내에 새 데이터 점을 추가

4. 모델 : .predict (값을 예측해서), (전혀 다른 모델 사용해서)

5. 부스팅 계열 모델 : 통상 이상치, 결측치에 대해 영향을 덜 받는다
'''

import pandas as pd
import numpy as np

dates = [
    '16/7/2025', '17/7/2025', '18/7/2025',
    '19/7/2025', '20/7/2025', '21/7/2025',
]

dates = pd.to_datetime(dates)
""" print(dates)
DatetimeIndex(['2025-07-16', '2025-07-17', '2025-07-18', '2025-07-19', '2025-07-20', '2025-07-21'],
              dtype='datetime64[ns]', freq=None) """

ts = pd.Series([2, np.nan, np.nan, 8, 10, np.nan], index=dates)
""" print(ts)
2025-07-16     2.0
2025-07-17     NaN
2025-07-18     NaN
2025-07-19     8.0
2025-07-20    10.0
2025-07-21     NaN """

ts = ts.interpolate() # 선형보간으로 채우고 마지막 값은 ffill로(이전값으로)
""" print(ts)
2025-07-16     2.0
2025-07-17     4.0
2025-07-18     6.0
2025-07-19     8.0
2025-07-20    10.0
2025-07-21    10.0 """